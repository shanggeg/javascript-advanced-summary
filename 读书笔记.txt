1、标识符是JavaScript中各种语法的名称。变量的名字就是一个标识符。标识符区分大小写。标识符第一个字符可以是任意Unicode字符，$，下划线。
2、在JavaScript中所有的值都有属性。每一个属性都有一个key（或name）和一个value。通过点（.）操作符可以读取属性，也可以给属性赋值，也可以用来调用方法。
3、原始值（基本类型）包括布尔值、数字、字符串、null和undefined。其他值都是对象。每个对象都有唯一的标识且只等于自己。
4、原始值的特点：①、按值进行比较。②、其属性不可改变、添加或移除。读取一个未知属性时，总会返回undefined。
5、对象：
      ①、简单对象，可以通过对象字面量来创建
	{firstName:'Jane',lastName:'Doe'}
      ②、数组，可以通过数组字面量来创建。
	['apple','banana','cherry']
      ③、正则表达式，可以通过正则表达式字面量来创建。
	/^a+b+$/
6、对象的特点：①、按引用进行比较。②、默认可变。对象属性可以很自由的被改变、添加和移除。
7、undefined“没有值”。未被初始化的变量即为undefined。丢失的参数也是undefined。访问不存在的属性，也会得到undefined。
8、null“没有对象”。在用到对象的时候他表示空值。
9、undefined和null没有属性，甚至连toString（）这种标准方法都没有。
10、函数允许透过undefined或null来表示缺失的值。
       if（x===undefined || x===null）{...}
也可以利用undefined和null都可视为false这一事实来处理。
       if（！x）{...}
11、使用typeof（用于原始值）和instanceof（用于对象）对值分类。
	typeof value。返回值是一个表示这个值“类型”的字符串。typeof null返回object是一个不能修正的bug，但这不代表null是一个对象。
	value instanceof Constr。如果value是一个通过Constr构造器创建的对象，则返回true。
12、undefined，null，false，-0，NaN，' '都可以解释为false。其他所有的值都会被当成true。被解释为false的值称为假值，被解释为true的值称为真值。
13、Boolean（）作为函数调用，会将传入的参数转换为一个布尔值。
14、二元逻辑运算符：
	与（&&）如果第一个运算数是假值，返回他。否则，返回第二个运算数。> NaN && 'abc'  → NaN。> 123 && ‘abc’→‘abc’。
	或（||）如果第一个运算数是真值，返回他。否则，返回第二个运算数。 > 'abc' || 123 →‘abc’。> ‘ ’|| 123 →123。
15、JavaScript中所有的数字都是浮点数。1===1.0 →true。  也包含一些特殊的数字：NaN（一个错误的值）。Infinity（多数情况下也是一个错误的值）
16、字符串时不可变的，如果要改变一个已有的字符串，必须创建一个新的才行。
17、字符串可以通过+进行连接，如果其中一个运算数是字符串的话，另一个运算数将被转换为字符串。
18、循环：if-else，while，for，do-while，switch。
19、函数。
	①、通过函数声明的方式定义函数。function  函数名（）{}                                                                                                    
	②、通过给变量赋值为函数表达式的方式来定义函数。var add = function（）{  }。
	③、函数表达式会产生一个值，因此可以将函数作为参数直接传递给另外的函数。。
